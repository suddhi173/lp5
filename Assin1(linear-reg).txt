import numpy as np
import pandas as pd

dataset=pd.read_csv("HousingData.csv")
dataset

dataset.isnull().sum()
dataset.fillna(dataset.mean(),inplace=True)
dataset.isnull().sum()

x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

print(x.shape)
print(y.shape)

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

import tensorflow as tf

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model=Sequential()

model.add(Dense(1,input_shape=(x_train.shape[1],)))

model.compile(optimizer='adam',loss='mse',metrics=['mae'])

model.summary()

history=model.fit(x_train,y_train,epochs=100,validation_split=0.2,verbose=1)

test_loss, test_mae = model.evaluate(x_test, y_test, verbose=1)
print(f"\nTest MAE: {test_mae:.2f}")

y_pred = model.predict(x_test)

import matplotlib.pyplot as plt


plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6, label='Predicted vs Actual')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', label='Perfect Prediction')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()