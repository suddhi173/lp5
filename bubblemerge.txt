
#include <omp.h>
#include <iostream>
#include <ctime>
#include <algorithm>  // For copy

using namespace std;

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

void bubbleSort(int arr[], int n, bool parallel) {
    if (parallel) {
        #pragma omp parallel for
        for (int i = 0; i < n - 1; ++i) {
            for (int j = 0; j < n - i - 1; ++j) {
                if (arr[j] > arr[j + 1]) swap(arr[j], arr[j + 1]);
            }
        }
    } else {
        for (int i = 0; i < n - 1; ++i) {
            for (int j = 0; j < n - i - 1; ++j) {
                if (arr[j] > arr[j + 1]) swap(arr[j], arr[j + 1]);
            }
        }
    }
}

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1, n2 = right - mid;
    int* leftArr = new int[n1], *rightArr = new int[n2];

    copy(arr + left, arr + left + n1, leftArr);
    copy(arr + mid + 1, arr + mid + 1 + n2, rightArr);

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) arr[k++] = (leftArr[i] <= rightArr[j]) ? leftArr[i++] : rightArr[j++];
    while (i < n1) arr[k++] = leftArr[i++];
    while (j < n2) arr[k++] = rightArr[j++];

    delete[] leftArr;
    delete[] rightArr;
}

void mergeSort(int arr[], int left, int right, bool parallel) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        if (parallel) {
            #pragma omp parallel sections
            {
                #pragma omp section
                mergeSort(arr, left, mid, parallel);

                #pragma omp section
                mergeSort(arr, mid + 1, right, parallel);
            }
        } else {
            mergeSort(arr, left, mid, parallel);
            mergeSort(arr, mid + 1, right, parallel);
        }
        merge(arr, left, mid, right);
    }
}

double getCurrentTime() {
    return (double) clock() / CLOCKS_PER_SEC;
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n; ++i) cout << arr[i] << " ";
    cout << endl;
}

void sortAndPrint(int arr[], int SIZE, bool parallel, bool isMergeSort) {
    int* arrCopy = new int[SIZE];
    copy(arr, arr + SIZE, arrCopy);

    double start = getCurrentTime();
    if (isMergeSort)
        mergeSort(arrCopy, 0, SIZE - 1, parallel);
    else
        bubbleSort(arrCopy, SIZE, parallel);
    double end = getCurrentTime();

    cout << "Sorted Array (" << (isMergeSort ? "Merge" : "Bubble") << " Sort"
         << (parallel ? " Parallel" : " Sequential") << "): ";
    printArray(arrCopy, SIZE);
    cout << (isMergeSort ? "Merge" : "Bubble") << " Sort"
         << (parallel ? " Parallel" : " Sequential") << " Time: " << end - start << " seconds\n";

    delete[] arrCopy;
}

int main() {
    int SIZE;
    cout << "Enter the size of the array: ";
    cin >> SIZE;

    int* arr = new int[SIZE];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < SIZE; ++i) cin >> arr[i];

    sortAndPrint(arr, SIZE, false, false);  // Sequential Bubble Sort
    sortAndPrint(arr, SIZE, true, false);   // Parallel Bubble Sort
    sortAndPrint(arr, SIZE, false, true);   // Sequential Merge Sort
    sortAndPrint(arr, SIZE, true, true);    // Parallel Merge Sort

    delete[] arr;
    return 0;
}
